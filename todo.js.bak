// Define a custom HTML element for the Lovelace card
class MyTodoCard extends LITElement {
	static getConfigElement() {
	  return MyTodoCard.getConfigElement();
	}

	static getStubConfig() {
	  return MyTodoCard.getStubConfig();
	}


  constructor() {
    super();

    // Attach a shadow DOM to isolate styles and structure
    this.attachShadow({ mode: 'open' });

    // Internal flags and state
    this._fetched = false;  // used to prevent repeated fetches
    this._hass = null;      // stores the Home Assistant instance
  }

  // Called when the card is configured in Lovelace
  setConfig(config) {
    // Validate that 'entities' is provided and is an array
    if (!config.entities || !Array.isArray(config.entities)) {
      throw new Error("You need to define 'entities' as an array");
    }

    // Store configuration
    this.config = config;
  }

  // This is called every time Home Assistant updates its state
  set hass(hass) {
    // Save the hass instance for later use
    this._hass = hass;
  }

  // Called once when the card is first added to the DOM
  connectedCallback() {
    // Only fetch data if we haven't already and we have config and hass
    if (!this._fetched && this._hass && this.config) {
      this._fetched = true;

      // Render an initial "Loading..." card
      this.renderCardSkeleton();

      // Begin fetching todo list data
      this.fetchTodos(this._hass);
    }
  }

  // Draw the card skeleton structure
  renderCardSkeleton() {
    // Setup the basic card layout with a header and placeholder
    this.shadowRoot.innerHTML = `
      <ha-card header="${this.config.title || 'My Todo Lists'}">
        <div class="card-content">Loading...</div>
      </ha-card>
    `;

    // Save a reference to the card content container for later updates
    this.content = this.shadowRoot.querySelector('.card-content');
  }

  // Fetch todo items from each configured entity using WebSocket API
	async fetchTodos(hass) {
	  const { entities, show_completed, days_ahead } = this.config;
	  const today = new Date();
	  const maxDate = new Date(today);
	  maxDate.setDate(today.getDate() + days_ahead - 1);

	  try {
		const promises = entities.map(async (entity) => {
		  const response = await hass.callWS({
			type: "call_service",
			domain: "todo",
			service: "get_items",
			target: { entity_id: entity },
			return_response: true
		  });

		  const items = response.response[entity]?.items || [];

		  // Filter items:
		  const filteredItems = items.filter(item => {
			if (!show_completed && item.status !== 'needs_action') return false;

			if (item.due) {
			  const dueDate = new Date(item.due);
			  // Strip time component for comparison
			  dueDate.setHours(0, 0, 0, 0);
			  return dueDate <= maxDate;
			}

			// If no due date, include it only if showing completed or needs_action
			return true;
		  });

		  return { entity, items: filteredItems };
		});

		const results = await Promise.all(promises);

		let html = '';
		results.forEach(({ entity, items }) => {
		  const title = entity.replace('todo.', '');
		  if (items.length) {
			html += `<b>${title}</b><ul>`;
			items.forEach(item => {
			  html += `<li>${item.summary}</li>`;
			});
			html += '</ul>';
		  } else {
			html += `<b>${title}</b>: No items found.<br>`;
		  }
		});

		this.content.innerHTML = html;

	  } catch (error) {
		console.error("Error fetching todo items:", error);
		this.content.innerHTML = "Error loading todo lists.";
	  }
	}

  // This tells Home Assistant how tall the card is
  getCardSize() {
    return 1; // Small card, 1 row
  }
}

// Register the custom element so Lovelace can use it
customElements.define('my-todo-card', MyTodoCard);

// Provide GUI editor support
MyTodoCard.getConfigElement = async function () {
  const element = document.createElement("div");

  element.setConfig = function (config) {
    this.innerHTML = `
      <label>
        Title:<br>
        <input id="title" value="${config.title || ''}">
      </label><br><br>

      <label>
        Todo Entities (comma-separated):<br>
        <input id="entities" value="${(config.entities || []).join(', ')}">
      </label><br><br>

      <label>
        Show Completed Items:
        <input type="checkbox" id="showCompleted" ${config.show_completed ? 'checked' : ''}>
      </label><br><br>

      <label>
        Days Ahead to Show (1 = today only):<br>
        <input type="number" id="daysAhead" min="1" max="30" value="${config.days_ahead || 1}">
      </label>
    `;

    this.getConfig = () => {
      const title = this.querySelector("#title").value;
      const entities = this.querySelector("#entities").value
        .split(",")
        .map((e) => e.trim())
        .filter(Boolean);
      const showCompleted = this.querySelector("#showCompleted").checked;
      const daysAhead = parseInt(this.querySelector("#daysAhead").value) || 1;

      return {
        type: "custom:my-todo-card",
        title,
        entities,
        show_completed: showCompleted,
        days_ahead: daysAhead,
      };
    };
  };

  return element;
};

// Required for HA GUI editor to recognize the card as configurable
MyTodoCard.getStubConfig = () => ({
  title: 'My Todo Lists',
  entities: ['todo.shopping_list'],
  show_completed: false,
  days_ahead: 1
});